@startuml DDD.NET.ArchitectureLayerView
package Web
note right: DDD中的Application层
package ApplicationCore
note right: DDD中的Domain层
package Infrastructure
note right: DDD中的Infrastructure层
Web ..> ApplicationCore
Infrastructure ..> ApplicationCore
Web ..> Infrastructure
@enduml

@startuml DDD.NET.DomainLayerClassView
class Order{
    + <<property>> string BuyerId {get; private set}
    + <<property>> DateTimeOffset OrderDate {get; private set}
    + <<property>> Address ShipToAddress {get; private set}
    - List<OrderItem> _orderItem
    + IReadOnlyCollection<OrderItem> OrderItems
    - Order()
    + Order(string buyerId, Address shipToAddress, List<OrderItem> items)
    + decimal Total()
}

() IAggrigateRoot
IAggrigateRoot -- Order

class OrderItem{
    + <<property>> CatalogItemOrdered ItemOrdered {get; private set}
    + <<property>> decimal UnitPrice {get; private set}
    + <<property>> int Units {get; private set}
    - OrderItem()
    + OrderItem(CatalogItemOrdered items, decimal unitPrice, int units)
}
Order *--> OrderItem

abstract BaseEntity{
    + <<property>> int Id 
}
BaseEntity <|-- Order
BaseEntity <|-- OrderItem

class Address{
    + readonly string Street
    + readonly string City
    + readonly string State
    + readonly string Country
    + readonly string ZipCode
    - Address()
    + Address(string street, string city, string state, string country, string zipCode)
}
Order --> Address
OrderItem --> CatalogItemOrdered
class CatalogItemOrdered{
    + readonly int CatalogItemId
    + readonly string ProductName
    + readonly string PictureUri
    - CatalogItemOrdered()
    + CatalogItemOrdered(int itemId, string productName, string pictureUri)
}

interface IOrderRepository{
    + Task<Order> GetByIdWithItemsAsync(int id)
}
IOrderRepository --> Order
@enduml

@startuml DDD.NET.InfrastructureClassView
interface IAsyncRepository <T>{
    + Task<T> GetByIdAsync(int id, CancellationToken token = default)
}
interface IOrderRepository{
    + Task<Order> GetByIdWithItemsAsync(int id)
}
class EfRepository<T>{
    # DbContext _dbContext
    + EfRepository(DbContext dbContext)
}
class OrderRepository{
    + OrderRepository(DbContext dbContext)
    + Task<T> GetByIdAsync(int id)
}
IOrderRepository --|> IAsyncRepository : IAsyncRepository<Order>
OrderRepository --|> EfRepository: EfRepository<Order>
EfRepository ..|> IAsyncRepository
OrderRepository ..|> IOrderRepository
@enduml

@startuml DDD.Java.JpaInfrastrutureClassView
class AggregateRoot{
    + string field
    + ValueObject vo
    + bussinessOp1()
    + bussinessOp2()
}
class ValueObject{
    string field1
    string field2
}
class AggregateEntity <<EJBEntity>> {
    + Long id
    + string field
    + ValueObject vo
}
note top of AggregateEntity : @Entity
note left of AggregateEntity::id
    @Id
    @GeneratedValue
end note
interface AggregateRepository{
    + AggregateRoot retrieve()
    + save(AggregateRoot ar)
}
class AggregateJpaRepository{
    + AggregateRoot findByField(string field)
    + AggregateRoot retrieve()
    + save(AggregateRoot ar)
}
note right of AggregateJpaRepository
@Component
@Transactional(propagation = Propagation.REQUIRES_NEW)
end note
interface AggregateDAO{
    + AggregateRoot findByField(string field)
}
annotation Aggregate
() JpaRepository
AggregateDAO -- JpaRepository : JpaRepository<AggregateEntity, Long>
AggregateRoot -->ValueObject
AggregateRoot ..|>Aggregate
AggregateRepository -->AggregateRoot
AggregateJpaRepository --|>AggregateRepository
AggregateJpaRepository -->AggregateDAO
AggregateJpaRepository -->AggregateEntity

note "fields重复代码，需要手工同步" as N1
N1 ... AggregateRoot
N1 ... AggregateEntity
@enduml